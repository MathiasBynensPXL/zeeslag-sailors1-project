<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Battleship.Domain</name>
    </assembly>
    <members>
        <member name="T:Battleship.Domain.Direction">
            <summary>
            Indicates a direction (e.g. North, SoutWest, ...)
            </summary>
        </member>
        <member name="P:Battleship.Domain.Direction.AllDirections">
            <summary>
            Array of all possible directions
            </summary>
        </member>
        <member name="P:Battleship.Domain.Direction.BasicDirections">
            <summary>
            Array of directions that are horizontal or vertical
            </summary>
        </member>
        <member name="P:Battleship.Domain.Direction.XStep">
            <summary>
            Horizontal direction.
            -1 = left
            1 = right
            0 = no horizontal direction 
            </summary>
        </member>
        <member name="P:Battleship.Domain.Direction.YStep">
            <summary>
            Vertical direction.
            -1 = up
            1 = down
            0 = no vertical direction 
            </summary>
        </member>
        <member name="P:Battleship.Domain.Direction.Opposite">
            <summary>
            Returns the opposite direction. E.g. the opposite of North is South.
            </summary>
        </member>
        <member name="M:Battleship.Domain.Direction.CreateRandomly(System.Boolean)">
            <summary>
            Returns a random direction.
            </summary>
            <param name="allowDiagonal">
            If true the direction can be diagonal.
            Default = false.
            </param>
        </member>
        <member name="M:Battleship.Domain.Direction.FromCoordinates(Battleship.Domain.GridDomain.GridCoordinate,Battleship.Domain.GridDomain.GridCoordinate)">
            <summary>
            Get the direction when you go from coordinate 1 to coordinate 2
            </summary>
        </member>
        <member name="T:Battleship.Domain.FleetDomain.ShipKind">
            <summary>
            There are 5 kind of ships in a battleship game.
            Each kind has a code, a name and a size. This class encapsulates this information.
            </summary>
        </member>
        <member name="P:Battleship.Domain.FleetDomain.ShipKind.All">
            <summary>
            Array containing the 5 ship kinds.
            </summary>
        </member>
        <member name="M:Battleship.Domain.FleetDomain.ShipKind.GenerateRandomSegmentCoordinates(System.Int32,System.Boolean)">
            <summary>
            Randomly generates an array of possible ship segment coordinates for the kind of ship.
            This method can be used to position a ship at random on a grid.
            </summary>
            <param name="gridSize">The coordinates will be within this grid size</param>
            <param name="allowDeformedShips">
            If false (=default), the coordinates will be horizontally or vertically aligned and will touch each other.
            If true, the coordinates will touch each other, but may possibly not be aligned (this is an EXTRA).
            </param>
        </member>
        <member name="P:Battleship.Domain.GameDomain.GameSettings.GridSize">
            <summary>
            Size of the grid.
            Must be a value between 10 and 15 (10 and 15 included)
            Default value = 10.
            </summary>
        </member>
        <member name="P:Battleship.Domain.GameDomain.GameSettings.AllowDeformedShips">
            <summary>
            Indicates if it is allowed to have the segments of a ship to not be aligned vertically or horizontally.
            If deformed ships are allowed the segments of a ship may also touch diagonally.
            Default value = false.
            </summary>
        </member>
        <member name="P:Battleship.Domain.GameDomain.GameSettings.Mode">
             <summary>
             There are 4 game modes:
             1 = Default: the classic mode in which each player can shoot one bomb per turn.
             2 = MultipleShotsPerTurnConstant: each player can shoot exactly 5 bombs per turn.
             3 = MultipleShotsPerTurnBiggestUndamagedShip: the number of bombs that a player can shoot in one turn is equal to the size of the biggest undamaged ship (with a minimum of 1 bomb).
             4 = MultipleShotsPerTurnNumberOfShips: the number of bombs that a player can shoot in one turn is equal to the number of remaining ships.
            
             Default value = 1;
             </summary>
        </member>
        <member name="P:Battleship.Domain.GameDomain.GameSettings.MustReportSunkenShip">
            <summary>
            Indicates if the opponent must let the player know if a shot of the player sunk a whole ship of the opponent.
            Default value = true;
            </summary>
        </member>
        <member name="P:Battleship.Domain.GameDomain.GameSettings.CanMoveUndamagedShipsDuringGame">
             <summary>
             Indicates if a ships can be moved during the game.
             Only undamaged ships can be moved.
             If true, the <see cref="P:Battleship.Domain.GameDomain.GameSettings.NumberOfTurnsBeforeAShipCanBeMoved"/> determined how many turns a player must wait before he can move a ship again.
            
             Default value = false.
             </summary>
        </member>
        <member name="P:Battleship.Domain.GameDomain.GameSettings.NumberOfTurnsBeforeAShipCanBeMoved">
             <summary>
             The number of turns a player must wait before het can move a ship.
             Must be a value between 1 and 10 (1 and 10 included)
             This property is only relevant when <see cref="P:Battleship.Domain.GameDomain.GameSettings.CanMoveUndamagedShipsDuringGame"/> is true.
            
             Default value = 5.
             </summary>
        </member>
        <member name="E:Battleship.Domain.GridDomain.GridSquare.OnHitByBomb">
            <summary>
            When a grid square is hit by a bomb (HitByBomb method is called), the OnHitByBomb event will be invoked.
            The square being hit is the sender of the event.
            </summary>
        </member>
        <member name="M:Battleship.Domain.PlayerDomain.Contracts.IShootingStrategy.DetermineTargetCoordinate">
            <summary>
            Tries to make an educated guess where to shoot next.
            </summary>
        </member>
        <member name="M:Battleship.Domain.PlayerDomain.Contracts.IShootingStrategy.RegisterShotResult(Battleship.Domain.GridDomain.GridCoordinate,Battleship.Domain.ShotResult)">
            <summary>
            After a shot is fired (by a computer player)
            it should let the shooting strategy know what the result was
            so it can make a better judgment on where to shoot next.
            </summary>
        </member>
        <member name="T:Battleship.Domain.ShotResult">
            <summary>
            Contains feedback on a shot at the opponent.
            </summary>
        </member>
        <member name="P:Battleship.Domain.ShotResult.ShotFired">
            <summary>
            Indicates if the shot actually succeeded.
            If false, the <see cref="P:Battleship.Domain.ShotResult.MisfireReason"/> will contain the reason the shot did not succeed
            (e.g. No bombs loaded, the opponent must shoot first).
            </summary>
        </member>
        <member name="P:Battleship.Domain.ShotResult.Hit">
            <summary>
            Indicates if the bomb hit a segment of an opponent ship.
            </summary>
        </member>
        <member name="P:Battleship.Domain.ShotResult.SunkenShip">
            <summary>
            When the shot causes the opponents ship to sink, then the sunken ship will be reported here
            (if the game settings dictate that sunken ships must be reported).
            When it is not required to report sunken ships or the shot did not cause a ship to sink, then the value will be null.
            </summary>
        </member>
        <member name="P:Battleship.Domain.ShotResult.MisfireReason">
            <summary>
            When <see cref="P:Battleship.Domain.ShotResult.ShotFired"/> is false, this will contain the reason why the shot did not fired.
            </summary>
        </member>
    </members>
</doc>
